{"version":3,"sources":["assets/Images/logo1.png","generated/graphql.tsx","components/LaunchDetails/Launchdetail.tsx","components/LaunchDetails/index.tsx","components/Launch/Launch.tsx","components/Launch/index.tsx","components/Home/Home.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CapsuleRange","LaunchRange","Order","CacheControlScope","LaunchesDocument","gql","LaunchInfoDocument","Launchdetail","data","launch","className","src","img1","alt","style","fontFamily","fontSize","mission_name","flight_number","launch_year","launch_success","width","details","rocket","rocket_name","rocket_type","LaunchDetailsContainer","baseOptions","id","useParams","variables","Apollo","loading","error","useStyles","makeStyles","theme","createStyles","root","flexGrow","paper","padding","spacing","margin","display","justifyContent","alignItems","maxWidth","image","height","img","maxHeight","Launch","classes","marginLeft","launches","map","i","key","Paper","Grid","container","item","xs","sm","direction","Typography","gutterBottom","variant","color","to","title","LaunchContainer","Home","marginRight","logo","Main","App","path","element","Boolean","window","location","hostname","match","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c44bd6eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo1.37a39b35.png\";","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  capsule?: Maybe<Capsule>;\n  capsules?: Maybe<Array<Maybe<Capsule>>>;\n  core?: Maybe<Core>;\n  cores?: Maybe<Array<Maybe<Core>>>;\n  dragon?: Maybe<Dragon>;\n  dragons?: Maybe<Array<Maybe<Dragon>>>;\n  history?: Maybe<Array<Maybe<History>>>;\n  info?: Maybe<Info>;\n  landingpad?: Maybe<Landingpad>;\n  landingpads?: Maybe<Array<Maybe<Landingpad>>>;\n  launch?: Maybe<Launch>;\n  launches?: Maybe<Array<Maybe<Launch>>>;\n  launchpad?: Maybe<Launchpad>;\n  launchpads?: Maybe<Array<Maybe<Launchpad>>>;\n  mission?: Maybe<Mission>;\n  missions?: Maybe<Array<Maybe<Mission>>>;\n  payload?: Maybe<Payload>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n  roadster?: Maybe<Roadster>;\n  rocket?: Maybe<Rocket>;\n  rockets?: Maybe<Array<Maybe<Rocket>>>;\n  ship?: Maybe<Ship>;\n  ships?: Maybe<Array<Maybe<Ship>>>;\n};\n\n\nexport type QueryCapsuleArgs = {\n  capsule_serial: Scalars['String'];\n};\n\n\nexport type QueryCapsulesArgs = {\n  range?: Maybe<CapsuleRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryCoreArgs = {\n  core_serial: Scalars['String'];\n};\n\n\nexport type QueryCoresArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryDragonArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryDragonsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryHistoryArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLandingpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLaunchArgs = {\n  id?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryLaunchesArgs = {\n  range?: Maybe<LaunchRange>;\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n  ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\n\nexport type QueryLaunchpadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryLaunchpadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMissionArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryMissionsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPayloadArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPayloadsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryRocketArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryRocketsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryShipArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryShipsArgs = {\n  limit?: Maybe<Scalars['Int']>;\n  offset?: Maybe<Scalars['Int']>;\n  order?: Maybe<Order>;\n  sort?: Maybe<Scalars['String']>;\n};\n\nexport enum CapsuleRange {\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport enum LaunchRange {\n  Latest = 'latest',\n  Next = 'next',\n  Past = 'past',\n  Upcoming = 'upcoming'\n}\n\nexport enum Order {\n  Asc = 'asc',\n  Desc = 'desc'\n}\n\nexport type BasicMission = {\n  __typename?: 'BasicMission';\n  name?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n};\n\nexport type Capsule = {\n  __typename?: 'Capsule';\n  capsule_serial?: Maybe<Scalars['String']>;\n  capsule_id?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  landings?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  reuse_count?: Maybe<Scalars['Int']>;\n};\n\nexport type Core = {\n  __typename?: 'Core';\n  core_serial?: Maybe<Scalars['String']>;\n  block?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  original_launch?: Maybe<Scalars['String']>;\n  original_launch_unix?: Maybe<Scalars['Float']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  reuse_count?: Maybe<Scalars['Int']>;\n  rtls_attempts?: Maybe<Scalars['Int']>;\n  rtls_landings?: Maybe<Scalars['Int']>;\n  asds_attempts?: Maybe<Scalars['Int']>;\n  asds_landings?: Maybe<Scalars['Int']>;\n  water_landing?: Maybe<Scalars['Boolean']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Dimension = {\n  __typename?: 'Dimension';\n  meters?: Maybe<Scalars['Float']>;\n  feet?: Maybe<Scalars['Float']>;\n};\n\nexport type Dragon = {\n  __typename?: 'Dragon';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  type?: Maybe<Scalars['String']>;\n  active?: Maybe<Scalars['Boolean']>;\n  crew_capacity?: Maybe<Scalars['Int']>;\n  sidewall_angle_deg?: Maybe<Scalars['Int']>;\n  orbit_duration_yr?: Maybe<Scalars['Int']>;\n  dry_mass_kg?: Maybe<Scalars['Int']>;\n  dry_mass_lb?: Maybe<Scalars['Int']>;\n  first_flight?: Maybe<Scalars['String']>;\n  heat_shield?: Maybe<HeatShield>;\n  thrusters?: Maybe<Array<Maybe<Thruster>>>;\n  launch_payload_mass?: Maybe<Mass>;\n  launch_payload_vol?: Maybe<PayloadVolume>;\n  return_payload_mass?: Maybe<Mass>;\n  return_payload_vol?: Maybe<PayloadVolume>;\n  pressurized_capsule?: Maybe<PressurizedCapsule>;\n  trunk?: Maybe<Trunk>;\n  height_w_trunk?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type Engines = {\n  __typename?: 'Engines';\n  number?: Maybe<Scalars['Int']>;\n  type?: Maybe<Scalars['String']>;\n  version?: Maybe<Scalars['String']>;\n  layout?: Maybe<Scalars['String']>;\n  engine_loss_max?: Maybe<Scalars['Int']>;\n  propellant_1?: Maybe<Scalars['String']>;\n  propellant_2?: Maybe<Scalars['String']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n  thrust_to_weight?: Maybe<Scalars['Float']>;\n};\n\nexport type Fairing = {\n  __typename?: 'Fairing';\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n};\n\nexport type Headquarters = {\n  __typename?: 'Headquarters';\n  address?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n};\n\nexport type HeatShield = {\n  __typename?: 'HeatShield';\n  material?: Maybe<Scalars['String']>;\n  size_meters?: Maybe<Scalars['Float']>;\n  temp_degrees?: Maybe<Scalars['Int']>;\n  dev_partner?: Maybe<Scalars['String']>;\n};\n\nexport type History = {\n  __typename?: 'History';\n  id?: Maybe<Scalars['Int']>;\n  title?: Maybe<Scalars['String']>;\n  event_date_utc?: Maybe<Scalars['String']>;\n  event_date_unix?: Maybe<Scalars['Float']>;\n  flight_number?: Maybe<Scalars['Int']>;\n  details?: Maybe<Scalars['String']>;\n  links?: Maybe<HistoryLinks>;\n};\n\nexport type HistoryLinks = {\n  __typename?: 'HistoryLinks';\n  article?: Maybe<Scalars['String']>;\n  reddit?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n};\n\nexport type Info = {\n  __typename?: 'Info';\n  name?: Maybe<Scalars['String']>;\n  founder?: Maybe<Scalars['String']>;\n  founded?: Maybe<Scalars['Int']>;\n  employees?: Maybe<Scalars['Int']>;\n  vehicles?: Maybe<Scalars['Int']>;\n  launch_sites?: Maybe<Scalars['Int']>;\n  test_sites?: Maybe<Scalars['Int']>;\n  ceo?: Maybe<Scalars['String']>;\n  cto?: Maybe<Scalars['String']>;\n  coo?: Maybe<Scalars['String']>;\n  cto_propulsion?: Maybe<Scalars['String']>;\n  valuation?: Maybe<Scalars['Float']>;\n  headquarters?: Maybe<Headquarters>;\n  summary?: Maybe<Scalars['String']>;\n};\n\nexport type LandingLegs = {\n  __typename?: 'LandingLegs';\n  number?: Maybe<Scalars['Int']>;\n  material?: Maybe<Scalars['String']>;\n};\n\nexport type Landingpad = {\n  __typename?: 'Landingpad';\n  id?: Maybe<Scalars['String']>;\n  full_name?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  landing_type?: Maybe<Scalars['String']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Launch = {\n  __typename?: 'Launch';\n  flight_number?: Maybe<Scalars['Int']>;\n  mission_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  mission_name?: Maybe<Scalars['String']>;\n  launch_year?: Maybe<Scalars['Int']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_local?: Maybe<Scalars['String']>;\n  is_tentative?: Maybe<Scalars['Boolean']>;\n  tentative_max_precision?: Maybe<Scalars['String']>;\n  tbd?: Maybe<Scalars['Boolean']>;\n  launch_window?: Maybe<Scalars['Int']>;\n  rocket?: Maybe<LaunchRocket>;\n  ships?: Maybe<Array<Maybe<Scalars['String']>>>;\n  telemetry?: Maybe<LaunchTelemetry>;\n  launch_site?: Maybe<LaunchSite>;\n  launch_success?: Maybe<Scalars['Boolean']>;\n  links?: Maybe<LaunchLinks>;\n  details?: Maybe<Scalars['String']>;\n  upcoming?: Maybe<Scalars['Boolean']>;\n  static_fire_date_utc?: Maybe<Scalars['String']>;\n  static_fire_date_unix?: Maybe<Scalars['Float']>;\n  timeline?: Maybe<LaunchTimeline>;\n};\n\nexport type LaunchLinks = {\n  __typename?: 'LaunchLinks';\n  mission_patch?: Maybe<Scalars['String']>;\n  mission_patch_small?: Maybe<Scalars['String']>;\n  reddit_campaign?: Maybe<Scalars['String']>;\n  reddit_launch?: Maybe<Scalars['String']>;\n  reddit_recovery?: Maybe<Scalars['String']>;\n  reddit_media?: Maybe<Scalars['String']>;\n  presskit?: Maybe<Scalars['String']>;\n  article_link?: Maybe<Scalars['String']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  video_link?: Maybe<Scalars['String']>;\n  youtube_id?: Maybe<Scalars['String']>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type Launchpad = {\n  __typename?: 'Launchpad';\n  id?: Maybe<Scalars['Int']>;\n  status?: Maybe<Scalars['String']>;\n  location?: Maybe<Location>;\n  vehicles_launched?: Maybe<Array<Maybe<Scalars['String']>>>;\n  attempted_launches?: Maybe<Scalars['Int']>;\n  successful_launches?: Maybe<Scalars['Int']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n  site_id?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocket = {\n  __typename?: 'LaunchRocket';\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n  first_stage?: Maybe<LaunchRocketFirstStage>;\n  second_stage?: Maybe<LaunchRocketSecondStage>;\n  fairings?: Maybe<LaunchRocketFairings>;\n};\n\nexport type LaunchRocketFairings = {\n  __typename?: 'LaunchRocketFairings';\n  reused?: Maybe<Scalars['Boolean']>;\n  recovery_attempt?: Maybe<Scalars['Boolean']>;\n  recovered?: Maybe<Scalars['Boolean']>;\n  ship?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocketFirstStage = {\n  __typename?: 'LaunchRocketFirstStage';\n  cores?: Maybe<Array<Maybe<LaunchRocketFirstStageCore>>>;\n};\n\nexport type LaunchRocketFirstStageCore = {\n  __typename?: 'LaunchRocketFirstStageCore';\n  core_serial?: Maybe<Scalars['String']>;\n  flight?: Maybe<Scalars['Int']>;\n  block?: Maybe<Scalars['Int']>;\n  gridfins?: Maybe<Scalars['Boolean']>;\n  legs?: Maybe<Scalars['Boolean']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  land_success?: Maybe<Scalars['Boolean']>;\n  landing_intent?: Maybe<Scalars['Boolean']>;\n  landing_type?: Maybe<Scalars['String']>;\n  landing_vehicle?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchRocketSecondStage = {\n  __typename?: 'LaunchRocketSecondStage';\n  block?: Maybe<Scalars['Int']>;\n  payloads?: Maybe<Array<Maybe<Payload>>>;\n};\n\nexport type LaunchSite = {\n  __typename?: 'LaunchSite';\n  site_id?: Maybe<Scalars['String']>;\n  site_name?: Maybe<Scalars['String']>;\n  site_name_long?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchTelemetry = {\n  __typename?: 'LaunchTelemetry';\n  flight_club?: Maybe<Scalars['String']>;\n};\n\nexport type LaunchTimeline = {\n  __typename?: 'LaunchTimeline';\n  webcast_liftoff?: Maybe<Scalars['Int']>;\n  go_for_prop_loading?: Maybe<Scalars['Int']>;\n  rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_rp1_loading?: Maybe<Scalars['Int']>;\n  stage1_lox_loading?: Maybe<Scalars['Int']>;\n  stage2_rp1_loading?: Maybe<Scalars['Int']>;\n  stage2_lox_loading?: Maybe<Scalars['Int']>;\n  engine_chill?: Maybe<Scalars['Int']>;\n  prelaunch_checks?: Maybe<Scalars['Int']>;\n  propellant_pressurization?: Maybe<Scalars['Int']>;\n  go_for_launch?: Maybe<Scalars['Int']>;\n  ignition?: Maybe<Scalars['Int']>;\n  liftoff?: Maybe<Scalars['Int']>;\n  maxq?: Maybe<Scalars['Int']>;\n  beco?: Maybe<Scalars['Int']>;\n  side_core_sep?: Maybe<Scalars['Int']>;\n  side_core_boostback?: Maybe<Scalars['Int']>;\n  meco?: Maybe<Scalars['Int']>;\n  stage_sep?: Maybe<Scalars['Int']>;\n  center_stage_sep?: Maybe<Scalars['Int']>;\n  second_stage_ignition?: Maybe<Scalars['Int']>;\n  center_core_boostback?: Maybe<Scalars['Int']>;\n  fairing_deploy?: Maybe<Scalars['Int']>;\n  first_stage_entry_burn?: Maybe<Scalars['Int']>;\n  side_core_entry_burn?: Maybe<Scalars['Int']>;\n  center_core_entry_burn?: Maybe<Scalars['Int']>;\n  seco_1?: Maybe<Scalars['Int']>;\n  first_stage_landing_burn?: Maybe<Scalars['Int']>;\n  first_stage_landing?: Maybe<Scalars['Int']>;\n  side_core_landing?: Maybe<Scalars['Int']>;\n  center_core_landing?: Maybe<Scalars['Int']>;\n  second_stage_restart?: Maybe<Scalars['Int']>;\n  seco_2?: Maybe<Scalars['Int']>;\n  payload_deploy?: Maybe<Scalars['Int']>;\n  payload_deploy_1?: Maybe<Scalars['Int']>;\n  payload_deploy_2?: Maybe<Scalars['Int']>;\n  dragon_separation?: Maybe<Scalars['Int']>;\n  dragon_solar_deploy?: Maybe<Scalars['Int']>;\n  dragon_bay_door_deploy?: Maybe<Scalars['Int']>;\n};\n\nexport type Location = {\n  __typename?: 'Location';\n  name?: Maybe<Scalars['String']>;\n  region?: Maybe<Scalars['String']>;\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type Mass = {\n  __typename?: 'Mass';\n  kg?: Maybe<Scalars['Int']>;\n  lb?: Maybe<Scalars['Int']>;\n};\n\nexport type Mission = {\n  __typename?: 'Mission';\n  mission_name?: Maybe<Scalars['String']>;\n  mission_id?: Maybe<Scalars['String']>;\n  manufacturers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  payload_ids?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  website?: Maybe<Scalars['String']>;\n  twitter?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type Payload = {\n  __typename?: 'Payload';\n  payload_id?: Maybe<Scalars['String']>;\n  norad_id?: Maybe<Array<Maybe<Scalars['String']>>>;\n  cap_serial?: Maybe<Scalars['String']>;\n  reused?: Maybe<Scalars['Boolean']>;\n  customers?: Maybe<Array<Maybe<Scalars['String']>>>;\n  nationality?: Maybe<Scalars['String']>;\n  manufacturer?: Maybe<Scalars['String']>;\n  payload_type?: Maybe<Scalars['String']>;\n  payload_mass_kg?: Maybe<Scalars['Float']>;\n  payload_mass_lbs?: Maybe<Scalars['Float']>;\n  orbit?: Maybe<Scalars['String']>;\n  orbit_params?: Maybe<PayloadOrbitParams>;\n  mass_returned_kg?: Maybe<Scalars['Float']>;\n  mass_returned_lbs?: Maybe<Scalars['Float']>;\n  flight_time_sec?: Maybe<Scalars['Int']>;\n  cargo_manifest?: Maybe<Scalars['String']>;\n};\n\nexport type PayloadOrbitParams = {\n  __typename?: 'PayloadOrbitParams';\n  reference_system?: Maybe<Scalars['String']>;\n  regime?: Maybe<Scalars['String']>;\n  longitude?: Maybe<Scalars['Float']>;\n  semi_major_axis_km?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  periapsis_km?: Maybe<Scalars['Float']>;\n  apoapsis_km?: Maybe<Scalars['Float']>;\n  inclination_deg?: Maybe<Scalars['Float']>;\n  period_min?: Maybe<Scalars['Float']>;\n  lifespan_years?: Maybe<Scalars['Float']>;\n  epoch?: Maybe<Scalars['String']>;\n  mean_motion?: Maybe<Scalars['Float']>;\n  raan?: Maybe<Scalars['Float']>;\n  arg_of_pericenter?: Maybe<Scalars['Float']>;\n  mean_anomaly?: Maybe<Scalars['Float']>;\n};\n\nexport type PayloadVolume = {\n  __typename?: 'PayloadVolume';\n  cubic_meters?: Maybe<Scalars['Int']>;\n  cubic_feet?: Maybe<Scalars['Int']>;\n};\n\nexport type Position = {\n  __typename?: 'Position';\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type PressurizedCapsule = {\n  __typename?: 'PressurizedCapsule';\n  payload_volume?: Maybe<PayloadVolume>;\n};\n\nexport type Roadster = {\n  __typename?: 'Roadster';\n  name: Scalars['String'];\n  launch_date_utc?: Maybe<Scalars['String']>;\n  launch_date_unix?: Maybe<Scalars['Float']>;\n  launch_mass_kg?: Maybe<Scalars['Int']>;\n  launch_mass_lbs?: Maybe<Scalars['Int']>;\n  norad_id?: Maybe<Scalars['Int']>;\n  epoch_jd?: Maybe<Scalars['Float']>;\n  orbit_type?: Maybe<Scalars['String']>;\n  apoapsis_au?: Maybe<Scalars['Float']>;\n  semi_major_axis_au?: Maybe<Scalars['Float']>;\n  eccentricity?: Maybe<Scalars['Float']>;\n  inclination?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n  periapsis_arg?: Maybe<Scalars['Float']>;\n  period_days?: Maybe<Scalars['Float']>;\n  speed_kph?: Maybe<Scalars['Float']>;\n  speed_mph?: Maybe<Scalars['Float']>;\n  earth_distance_km?: Maybe<Scalars['Float']>;\n  earth_distance_mi?: Maybe<Scalars['Float']>;\n  mars_distance_km?: Maybe<Scalars['Float']>;\n  mars_distance_mi?: Maybe<Scalars['Float']>;\n  wikipedia?: Maybe<Scalars['String']>;\n  details?: Maybe<Scalars['String']>;\n};\n\nexport type Rocket = {\n  __typename?: 'Rocket';\n  id?: Maybe<Scalars['Int']>;\n  active?: Maybe<Scalars['Boolean']>;\n  stages?: Maybe<Scalars['Int']>;\n  boosters?: Maybe<Scalars['Int']>;\n  cost_per_launch?: Maybe<Scalars['Int']>;\n  success_rate_pct?: Maybe<Scalars['Float']>;\n  first_flight?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  company?: Maybe<Scalars['String']>;\n  height?: Maybe<Dimension>;\n  diameter?: Maybe<Dimension>;\n  mass?: Maybe<Mass>;\n  payload_weights?: Maybe<Array<Maybe<RocketPayloadWeight>>>;\n  first_stage?: Maybe<RocketFirstStage>;\n  second_stage?: Maybe<RocketSecondStage>;\n  engines?: Maybe<Engines>;\n  landing_legs?: Maybe<LandingLegs>;\n  flickr_images?: Maybe<Array<Maybe<Scalars['String']>>>;\n  wikipedia?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  rocket_id?: Maybe<Scalars['String']>;\n  rocket_name?: Maybe<Scalars['String']>;\n  rocket_type?: Maybe<Scalars['String']>;\n};\n\nexport type RocketFirstStage = {\n  __typename?: 'RocketFirstStage';\n  reusable?: Maybe<Scalars['Boolean']>;\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust_sea_level?: Maybe<Thrust>;\n  thrust_vacuum?: Maybe<Thrust>;\n};\n\nexport type RocketPayload = {\n  __typename?: 'RocketPayload';\n  option_1?: Maybe<Scalars['String']>;\n  option_2?: Maybe<Scalars['String']>;\n  composite_fairing?: Maybe<Fairing>;\n};\n\nexport type RocketPayloadWeight = {\n  __typename?: 'RocketPayloadWeight';\n  id?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  kg?: Maybe<Scalars['Float']>;\n  lb?: Maybe<Scalars['Float']>;\n};\n\nexport type RocketSecondStage = {\n  __typename?: 'RocketSecondStage';\n  engines?: Maybe<Scalars['Int']>;\n  fuel_amount_tons?: Maybe<Scalars['Float']>;\n  burn_time_sec?: Maybe<Scalars['Int']>;\n  thrust?: Maybe<Thrust>;\n  payloads?: Maybe<RocketPayload>;\n};\n\nexport type Ship = {\n  __typename?: 'Ship';\n  ship_id?: Maybe<Scalars['String']>;\n  ship_name?: Maybe<Scalars['String']>;\n  ship_model?: Maybe<Scalars['String']>;\n  ship_type?: Maybe<Scalars['String']>;\n  roles?: Maybe<Array<Maybe<Scalars['String']>>>;\n  active?: Maybe<Scalars['Boolean']>;\n  imo?: Maybe<Scalars['Int']>;\n  mmsi?: Maybe<Scalars['Int']>;\n  abs?: Maybe<Scalars['Int']>;\n  class?: Maybe<Scalars['Int']>;\n  weight_lbs?: Maybe<Scalars['Float']>;\n  weight_kg?: Maybe<Scalars['Float']>;\n  year_built?: Maybe<Scalars['Int']>;\n  home_port?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  speed_kn?: Maybe<Scalars['Float']>;\n  course_deg?: Maybe<Scalars['Float']>;\n  position?: Maybe<Position>;\n  successful_landings?: Maybe<Scalars['Int']>;\n  attempted_landings?: Maybe<Scalars['Int']>;\n  missions?: Maybe<Array<Maybe<BasicMission>>>;\n  url?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n};\n\nexport type Thrust = {\n  __typename?: 'Thrust';\n  kN?: Maybe<Scalars['Float']>;\n  lbf?: Maybe<Scalars['Float']>;\n};\n\nexport type Thruster = {\n  __typename?: 'Thruster';\n  type?: Maybe<Scalars['String']>;\n  amount?: Maybe<Scalars['Int']>;\n  pods?: Maybe<Scalars['Int']>;\n  fuel_1?: Maybe<Scalars['String']>;\n  fuel_2?: Maybe<Scalars['String']>;\n  thrust?: Maybe<Thrust>;\n};\n\nexport type Trunk = {\n  __typename?: 'Trunk';\n  trunk_volume?: Maybe<PayloadVolume>;\n  cargo?: Maybe<TrunkCargo>;\n};\n\nexport type TrunkCargo = {\n  __typename?: 'TrunkCargo';\n  solar_array?: Maybe<Scalars['Int']>;\n  unpressurized_cargo?: Maybe<Scalars['Boolean']>;\n};\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type LaunchesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LaunchesQuery = (\n  { __typename?: 'Query' }\n  & { launches?: Maybe<Array<Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'flight_number' | 'mission_name' | 'launch_year' | 'launch_success'>\n  )>>> }\n);\n\nexport type LaunchInfoQueryVariables = Exact<{\n  id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type LaunchInfoQuery = (\n  { __typename?: 'Query' }\n  & { launch?: Maybe<(\n    { __typename?: 'Launch' }\n    & Pick<Launch, 'flight_number' | 'mission_name' | 'launch_year' | 'launch_success' | 'details'>\n    & { launch_site?: Maybe<(\n      { __typename?: 'LaunchSite' }\n      & Pick<LaunchSite, 'site_name'>\n    )>, rocket?: Maybe<(\n      { __typename?: 'LaunchRocket' }\n      & Pick<LaunchRocket, 'rocket_name' | 'rocket_type'>\n    )>, links?: Maybe<(\n      { __typename?: 'LaunchLinks' }\n      & Pick<LaunchLinks, 'video_link' | 'flickr_images'>\n    )> }\n  )> }\n);\n\n\nexport const LaunchesDocument = gql`\n    query launches {\n  launches {\n    flight_number\n    mission_name\n    launch_year\n    launch_success\n  }\n}\n    `;\n\n/**\n * __useLaunchesQuery__\n *\n * To run a query within a React component, call `useLaunchesQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLaunchesQuery(baseOptions?: Apollo.QueryHookOptions<LaunchesQuery, LaunchesQueryVariables>) {\n        return Apollo.useQuery<LaunchesQuery, LaunchesQueryVariables>(LaunchesDocument, baseOptions);\n      }\nexport function useLaunchesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LaunchesQuery, LaunchesQueryVariables>) {\n          return Apollo.useLazyQuery<LaunchesQuery, LaunchesQueryVariables>(LaunchesDocument, baseOptions);\n        }\nexport type LaunchesQueryHookResult = ReturnType<typeof useLaunchesQuery>;\nexport type LaunchesLazyQueryHookResult = ReturnType<typeof useLaunchesLazyQuery>;\nexport type LaunchesQueryResult = Apollo.QueryResult<LaunchesQuery, LaunchesQueryVariables>;\nexport const LaunchInfoDocument = gql`\n    query launchInfo($id: String) {\n  launch(id: $id) {\n    flight_number\n    mission_name\n    launch_year\n    launch_success\n    details\n    launch_site {\n      site_name\n    }\n    rocket {\n      rocket_name\n      rocket_type\n    }\n    links {\n      video_link\n      flickr_images\n    }\n  }\n}\n    `;\n\n/**\n * __useLaunchInfoQuery__\n *\n * To run a query within a React component, call `useLaunchInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useLaunchInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLaunchInfoQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useLaunchInfoQuery(baseOptions?: Apollo.QueryHookOptions<LaunchInfoQuery, LaunchInfoQueryVariables>) {\n        return Apollo.useQuery<LaunchInfoQuery, LaunchInfoQueryVariables>(LaunchInfoDocument, baseOptions);\n      }\nexport function useLaunchInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LaunchInfoQuery, LaunchInfoQueryVariables>) {\n          return Apollo.useLazyQuery<LaunchInfoQuery, LaunchInfoQueryVariables>(LaunchInfoDocument, baseOptions);\n        }\nexport type LaunchInfoQueryHookResult = ReturnType<typeof useLaunchInfoQuery>;\nexport type LaunchInfoLazyQueryHookResult = ReturnType<typeof useLaunchInfoLazyQuery>;\nexport type LaunchInfoQueryResult = Apollo.QueryResult<LaunchInfoQuery, LaunchInfoQueryVariables>;","import React from \"react\";\nimport { LaunchInfoQuery } from \"../../generated/graphql\";\nimport \"./style.css\";\nimport img1 from \"../../assets/Images/logo1.png\";\n\ninterface Props {\n  data: LaunchInfoQuery;\n}\n\nconst Launchdetail: React.FC<Props> = ({ data }) => {\n  if (!data.launch) {\n    return <div>Launch Unavailable</div>;\n  }\n  return (\n    <div className=\"LaunchDetail\">\n      <div>\n        <img src={img1} alt=\"\" className=\"imgLogo\" />\n      </div>\n\n      <h1 style={{ fontFamily: \"serif\", fontSize: \"55px\" }}>\n        Mission: {data.launch.mission_name}\n      </h1>\n\n      <div style={{ fontFamily: \"serif\" }}>\n        <h2>Launch Details :</h2>\n        <span>Flight Number : {data.launch.flight_number}</span>\n        <br></br>\n        <span>Launch year : {data.launch.launch_year}</span>\n        <br></br>\n        <span>\n          Launch Successfull:{\" \"}\n          {data.launch.launch_success === true ? \"YES\" : \"NO\"}\n        </span>\n        <br></br>\n        <span style={{ width: \"100%\" }}> Detail : {data.launch.details}</span>\n      </div>\n      <div>\n        <h2>Rocket Details :</h2>\n        <span>Rocket Name : {data.launch.rocket?.rocket_name}</span>\n        <br></br>\n        <span>Rocket Type : {data.launch.rocket?.rocket_type}</span>\n      </div>\n    </div>\n  );\n};\nexport default Launchdetail;\n","import React from \"react\";\nimport { useLaunchInfoQuery } from \"../../generated/graphql\";\nimport Launchdetail from \"./Launchdetail\";\nimport { useParams } from \"react-router-dom\";\n\nconst LaunchDetailsContainer = () => {\n  let { id } = useParams();\n  const { loading, error, data } = useLaunchInfoQuery({\n    variables: { id: id },\n  });\n  if (loading) {\n    return (\n      <div className=\"parentLoader\">\n        <div className=\"loader\">\n          {/* <img\n          src=\"https://i.pinimg.com/originals/65/ba/48/65ba488626025cff82f091336fbf94bb.gif\"\n          alt=\"\"\n          style={{\n            height: \"50vh\",\n            width: \"30%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            marginLeft: \"30%\",\n            marginRight: \"30%\",\n          }}\n        /> */}\n        </div>\n      </div>\n    );\n  }\n  if (error) {\n    return <div>Give some Error</div>;\n  }\n  if (!data) {\n    return <div>Please Select a mission detail</div>;\n  }\n  return <Launchdetail data={data} />;\n};\nexport default LaunchDetailsContainer;\n","import React, { Fragment } from \"react\";\nimport { LaunchesQuery } from \"../../generated/graphql\";\nimport \"./style.css\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link } from \"react-router-dom\";\n// import ButtonBase from \"@material-ui/core/ButtonBase\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      margin: \"25px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      // margin: \"auto\",\n      maxWidth: 1000,\n    },\n    image: {\n      width: 128,\n      height: 128,\n    },\n    img: {\n      margin: \"auto\",\n      display: \"block\",\n      maxWidth: \"100%\",\n      maxHeight: \"100%\",\n    },\n  })\n);\n\ninterface Props {\n  data: LaunchesQuery;\n}\n\nconst Launch: React.FC<Props> = ({ data }) => {\n  const classes = useStyles();\n  return (\n    <div className=\"launches\">\n      <h1 style={{ fontFamily: \"serif\", marginLeft: \"25px\" }}>All Launches</h1>\n\n      {!!data.launches &&\n        data.launches.map(\n          (Launch, i) =>\n            !!Launch && (\n              <Fragment key={i}>\n                <div className={classes.root}>\n                  <Paper className={classes.paper}>\n                    <Grid container spacing={2}>\n                      <Grid item xs={12} sm container>\n                        <Grid item xs container direction=\"column\" spacing={2}>\n                          <Grid item xs>\n                            <Typography gutterBottom variant=\"subtitle1\">\n                              Flight Number :{Launch.flight_number}\n                            </Typography>\n                            <Typography variant=\"h4\" gutterBottom>\n                              Mission Name : {Launch.mission_name}{\" \"}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                              Mission Successed{\" \"}\n                              {Launch.launch_success === true ? \"Yes\" : \"No\"}\n                            </Typography>\n                          </Grid>\n                          <Grid item>\n                            <Link\n                              to={`/${Launch.flight_number}`}\n                              title=\"Button push blue/green\"\n                              className=\"button btnPush btnBlueGreen\"\n                            >\n                              Details\n                            </Link>\n                          </Grid>\n                        </Grid>\n                        <Grid item>\n                          <Typography variant=\"subtitle1\">\n                            Year : {Launch.launch_year}\n                          </Typography>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Paper>\n                </div>\n              </Fragment>\n            )\n        )}\n    </div>\n  );\n};\nexport default Launch;\n","import React from \"react\";\nimport { useLaunchesQuery } from \"../../generated/graphql\";\nimport Launch from \"./Launch\";\n\nconst LaunchContainer = () => {\n  const { loading, error, data } = useLaunchesQuery();\n  if (loading)\n    return (\n      <div className=\"parentLoader\">\n        <div className=\"loader\"></div>\n      </div>\n    );\n  if (error || !data) {\n    return <div>There was an error</div>;\n  }\n  return <Launch data={data} />;\n};\n\nexport default LaunchContainer;\n","import React from \"react\";\nimport logo from \"../../assets/Images/logo1.png\";\n// import rocket from \"../../assets/Images/rocket.png\";\n\nimport \"./Home.css\";\n\nexport const Home = () => {\n  return (\n    <div className=\"Home\">\n      {/* <img\n        src=\"https://www.animatedimages.org/data/media/45/animated-astronaut-image-0038.gif\"\n        alt=\"\"\n      /> */}\n      <img\n        style={{\n          height: \"30vh\",\n          width: \"50%\",\n          marginLeft: \"20%\",\n          marginRight: \"20%\",\n        }}\n        src={logo}\n        alt=\"\"\n      />\n      {/* <h1 style={{ fontFamily: \"serif\" }}>Space x</h1> */}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport Launch from \"./components/Launch\";\n// import Launchdetail from \"./components/LaunchDetails\";\nimport { Home } from \"./components/Home/Home\";\n\nconst Main = () => {\n  return (\n    <div className=\"Ap\">\n      <div className=\"App\">\n        <Home />\n      </div>\n\n      <Launch />\n\n      {/* <Launchdetail /> */}\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\n// import Launch from \"./components/Launch\";\nimport Launchdetail from \"./components/LaunchDetails\";\n// import { Home } from \"./components/Home/Home\";\n// import Top from \"./components/topbutton/Top\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Main from \"./Main\";\n\nconst App = () => {\n  return (\n    <div className=\"Ap\">\n      {/* <Main /> */}\n\n      <Routes>\n        <Route path=\"/\" element={<Main />} />\n        <Route path=\"/:id\" element={<Launchdetail />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ApolloProvider, InMemoryCache, ApolloClient } from \"@apollo/client\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nconst client = new ApolloClient({\n  uri: \"https://spacexdata.herokuapp.com/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}